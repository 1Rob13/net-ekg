// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/1Rob13/net-ekg/models"
)

// PostSubscribersCreatedCode is the HTTP code returned for type PostSubscribersCreated
const PostSubscribersCreatedCode int = 201

/*
PostSubscribersCreated User registration successful

swagger:response postSubscribersCreated
*/
type PostSubscribersCreated struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewPostSubscribersCreated creates PostSubscribersCreated with default headers values
func NewPostSubscribersCreated() *PostSubscribersCreated {

	return &PostSubscribersCreated{}
}

// WithPayload adds the payload to the post subscribers created response
func (o *PostSubscribersCreated) WithPayload(payload *models.User) *PostSubscribersCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post subscribers created response
func (o *PostSubscribersCreated) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSubscribersCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostSubscribersBadRequestCode is the HTTP code returned for type PostSubscribersBadRequest
const PostSubscribersBadRequestCode int = 400

/*
PostSubscribersBadRequest Invalid request payload

swagger:response postSubscribersBadRequest
*/
type PostSubscribersBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostSubscribersBadRequest creates PostSubscribersBadRequest with default headers values
func NewPostSubscribersBadRequest() *PostSubscribersBadRequest {

	return &PostSubscribersBadRequest{}
}

// WithPayload adds the payload to the post subscribers bad request response
func (o *PostSubscribersBadRequest) WithPayload(payload *models.Error) *PostSubscribersBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post subscribers bad request response
func (o *PostSubscribersBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSubscribersBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
