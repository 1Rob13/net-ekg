// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "net ecg",
    "version": "1.0.0"
  },
  "paths": {
    "/subscribers": {
      "get": {
        "description": "Endpoint to register a new user with name and email",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "ask if user exists",
        "parameters": [
          {
            "description": "Request User",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User registration successful",
            "schema": {
              "$ref": "#/definitions/UserArray"
            }
          },
          "400": {
            "description": "Invalid request payload"
          }
        }
      },
      "post": {
        "description": "Endpoint to register a new user with name and email",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Register a new user",
        "parameters": [
          {
            "description": "User JSON Object",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registration successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid request payload"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "example": "johndoe@example.com"
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        }
      }
    },
    "UserArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "net ecg",
    "version": "1.0.0"
  },
  "paths": {
    "/subscribers": {
      "get": {
        "description": "Endpoint to register a new user with name and email",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "ask if user exists",
        "parameters": [
          {
            "description": "Request User",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User registration successful",
            "schema": {
              "$ref": "#/definitions/UserArray"
            }
          },
          "400": {
            "description": "Invalid request payload"
          }
        }
      },
      "post": {
        "description": "Endpoint to register a new user with name and email",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Register a new user",
        "parameters": [
          {
            "description": "User JSON Object",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registration successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid request payload"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "example": "johndoe@example.com"
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        }
      }
    },
    "UserArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    }
  }
}`))
}
