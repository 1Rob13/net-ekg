// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PostRegisterReader is a Reader for the PostRegister structure.
type PostRegisterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRegisterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRegisterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRegisterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /register] PostRegister", response, response.Code())
	}
}

// NewPostRegisterOK creates a PostRegisterOK with default headers values
func NewPostRegisterOK() *PostRegisterOK {
	return &PostRegisterOK{}
}

/*
PostRegisterOK describes a response with status code 200, with default header values.

User registration successful
*/
type PostRegisterOK struct {
}

// IsSuccess returns true when this post register o k response has a 2xx status code
func (o *PostRegisterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post register o k response has a 3xx status code
func (o *PostRegisterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post register o k response has a 4xx status code
func (o *PostRegisterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post register o k response has a 5xx status code
func (o *PostRegisterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post register o k response a status code equal to that given
func (o *PostRegisterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post register o k response
func (o *PostRegisterOK) Code() int {
	return 200
}

func (o *PostRegisterOK) Error() string {
	return fmt.Sprintf("[POST /register][%d] postRegisterOK", 200)
}

func (o *PostRegisterOK) String() string {
	return fmt.Sprintf("[POST /register][%d] postRegisterOK", 200)
}

func (o *PostRegisterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRegisterBadRequest creates a PostRegisterBadRequest with default headers values
func NewPostRegisterBadRequest() *PostRegisterBadRequest {
	return &PostRegisterBadRequest{}
}

/*
PostRegisterBadRequest describes a response with status code 400, with default header values.

Invalid request payload
*/
type PostRegisterBadRequest struct {
}

// IsSuccess returns true when this post register bad request response has a 2xx status code
func (o *PostRegisterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post register bad request response has a 3xx status code
func (o *PostRegisterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post register bad request response has a 4xx status code
func (o *PostRegisterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post register bad request response has a 5xx status code
func (o *PostRegisterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post register bad request response a status code equal to that given
func (o *PostRegisterBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post register bad request response
func (o *PostRegisterBadRequest) Code() int {
	return 400
}

func (o *PostRegisterBadRequest) Error() string {
	return fmt.Sprintf("[POST /register][%d] postRegisterBadRequest", 400)
}

func (o *PostRegisterBadRequest) String() string {
	return fmt.Sprintf("[POST /register][%d] postRegisterBadRequest", 400)
}

func (o *PostRegisterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
